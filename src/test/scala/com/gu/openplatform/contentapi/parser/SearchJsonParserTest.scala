package com.gu.openplatform.contentapi.parser

import org.scalatest.matchers.ShouldMatchers
import org.scalatest.FlatSpec
import org.joda.time.DateTime
import JsonFileLoader._

class SearchJsonParserTest extends FlatSpec with ShouldMatchers {

  // generated by:
  // http://content.guardianapis.com/search.json
  //  ?page-size=2&show-fields=all&show-tags=all&show-refinements=all&refinement-size=2
  lazy val searchResponse = JsonParser.parseSearch(loadFile("search.json"))

  // generated by:
  // http://content.guardianapis.com/search.json
  //  ?api-key=<PARTNER KEY>&ids=music/picture/2010/aug/25/georgemichael-ukcrime&show-media=all&show-factboxes=all
  lazy val partnerSearchResponse = JsonParser.parseSearch(loadFile("search-partner.json"))

  "search endpoint parser" should "parse basic reponse header" in {
    searchResponse.status should be ("ok")
    searchResponse.userTier should be ("free")
  }

  it should "parse pagination" in {
    searchResponse.startIndex should be (1)
    searchResponse.pageSize should be (2)
    searchResponse.currentPage should be (1)
    searchResponse.pages should be (605440)
    searchResponse.total should be (1210879)
  }

  it should "have parse content correctly" in {
    searchResponse.results.size should be (2)
    val content = searchResponse.results.head
    content.id should be ("edinburgh/2010/aug/27/edinburgh-map-bank-holiday-events")
    content.sectionId should be (Some("edinburgh"))
    content.sectionName should be (Some("Edinburgh"))
    content.webPublicationDate should be (new DateTime(2010, 8, 27, 10, 30, 05, 0))
    content.webTitle should be ("Map: Things to do across Edinburgh this Bank Holiday weekend")
    content.webUrl should be ("http://www.guardian.co.uk/edinburgh/2010/aug/27/edinburgh-map-bank-holiday-events")
    content.apiUrl should be ("http://content.guardianapis.com/edinburgh/2010/aug/27/edinburgh-map-bank-holiday-events")
  }

  it should "parse fields" in {
    val fields = searchResponse.results.head.fields

    fields should be (Some(Map(
        "headline" -> "Map: Things to do across Edinburgh this Bank Holiday weekend",
        "trailText" -> "<p>Explore events for all ages going on in Edinburgh</p>",
        "shortUrl" -> "http://gu.com/p/2javn",
        "standfirst" -> "Explore events for all ages going on in Edinburgh",
        "byline" -> "Michael MacLeod",
        "publication" -> "guardian.co.uk"
      )))
  }

  it should "parse tags" in {
    val tags = searchResponse.results.head.tags

    tags.size should be (4)

    val edinburgh = tags.head
    edinburgh.id should be ("edinburgh/edinburgh")
    edinburgh.tagType should be ("blog")
    edinburgh.webTitle should be ("Edinburgh")
    edinburgh.webUrl should be ("http://www.guardian.co.uk/edinburgh/edinburgh")
    edinburgh.apiUrl should be ("http://content.guardianapis.com/edinburgh/edinburgh")
    edinburgh.sectionId should be (Some("edinburgh"))
    edinburgh.sectionName should be (Some("Edinburgh"))

    // and check optional sections work
    tags(1).sectionId should be (None)
  }

  it should "parse refinement groups" in {
    val refinements = searchResponse.refinementGroups

    refinements.size should be (7)
    val keywords = refinements.head
    keywords.`type` should be ("keyword")
    keywords.refinements.size should be (2)

    keywords.refinements.head.count should be (256463)
    keywords.refinements.head.displayName should be ("UK news")
  }

  it should "parse factboxes" in {
    searchResponse.results.head.factboxes should be (Nil)
    val factboxes = partnerSearchResponse.results.head.factboxes

    factboxes.size should be (1)
    factboxes.head.`type` should be ("photography-tip")
    factboxes.head.fields should be (Some(Map(
      "proTip" -> "By using auto-focus, continuous shooting mode and holding his camera above the crowd, the photographer has managed to capture the scene"
    )))
  }

  it should "parse media assets" in {
    searchResponse.results.head.mediaAssets should be (Nil)

    val mediaAssets = partnerSearchResponse.results.head.mediaAssets
    mediaAssets.size should be (2)
    mediaAssets.head.`type` should be ("picture")
    mediaAssets.head.file should be ("http://static.guim.co.uk/sys-images/Guardian/Pix/pictures/2010/8/25/1282722354152/george-michael-appears-in-003.jpg")

    mediaAssets.head.fields should be (Some(Map(
         "source" -> "Getty Images",
          "photographer" -> "Peter Macdiarmid",
          "height" -> "519",
          "credit" -> "Peter Macdiarmid/Getty Images",
          "altText" -> "george michael appears in court charged with driving offences",
          "caption" -> "Singer George Michael leaves  Highbury magistrates court surrounded by press and police. Michael pleaded guilty to driving under the influence of drugs and possessing cannabis after he crashed his car into a  shop in London. The singer has been warned that he may face a custodial sentence after a previous similar offence",
          "width" -> "780"    
      )))


  }


}